NEXT STEPS:
. Add in a listView which collects information on whether the user wishes to have easy, medium, or hard questions
. Generate test questions for submodules, starting with moduleID = 0, submoduleID = 0.
. Create a page which displays said test questions.
. Create an answer box for the user to answer said questions.
. Give feedback of a tick or a cross as to whether the user answered the question correctly
. Display the correct answer if the user got the answer wrong in a text box below the answer
. Provide model working out which becomes displayed below the correct answer if the question is answered incorrectly.



15/10/19 - Started the project on my laptop, Android Studio is being a bitch and everytime I try and use the visual editor it crashes Android Studio.
I am just editing the XML directly to get around this crashing because it's pissing me off and I need to start the project.
Working on the start page at the moment. Working on the positioning of the buttons but may leave the positioning until the end.
16/10/19 (Morning) - Stuck on where to start now I have my environment set up. Created a small list of TODOs to complete.
Real basic shit like "Create information page about yourself" with the hopes that if I just start doing something it's better than nothing.
I created a modules class, basically copied the headfirst android cookbooks workout class and changed it a bit. 
16/10/19 (Afternoon) - Started by creating an Information page for the project. Put the functionality to get to the 
information page by clicking the information button on the home screen. I also ran the app on my phone and made sure USB 
Debugging worked. I'm still getting used to Android Studio on Linux but I'm getting more confident.
31/10/19 - Happy Halloween ME! Well spent working on the project. You created the listFragment for the modules activity and
created an intent that then passed to that page. The listFragment worked really well and displayed everything it was supposed
to. I am calling it quits here. I can make the buttons do things later. 
01/11/19 - I spent four hours doing stuff and achieving fuck all. Added a listener to listen for button clicks and an interface
to communicate between the modulesPage activity and the modulesList fragment so when a listItem is selected it feeds back
the item ID to the activity which then launches the next activity, the submodulesPage, and passes the module ID to it.
This however doesn't seem to be working and keeps on crashing the app.
02/11/19 - Figured out the error from yesterday. I was trying to override a method from the superclass ... (finish later
I need to go to work.) The method was onListItemClick and I was trying to override included a long of ID. I had tried to make that 
an int, which obviously didn't work because it's calling a superclass method, so I was getting the error of no method in the
superclass. I fixed that and now the app doesn't crash when I try to click on lists. 
03/01/20 - Looking back through the code and understanding what is happening in it. Also fixed the problem where the submodule ID was 
always identical causing the same submodules to be displayed no matter which module was selected. The cause of this issue was the 
difference between the fragment and activity lifecycle. In submodulesPage the intent lines of code extracting the module ID and 
storing it in a local variable were put after the setContentView(...) method. The setContentView(...) method gave control of the page
to the fragment, which would then take over, causing the intent code to never be ran. As Integers default to 0 in Java it meant the 
moduleID always appeared to be 0 and so the same submodules were displayed no matter what.
09/01/20 - Created displayQuestion activity, testQuestionGeneration, and question class. The displayQuestion activity aims to do exactly what 
it says on the tin, it is supposed to display questions, and will enable the user to input and check an answer. The testQuestionGeneration is 
a factory class which will contain methods which will return the question class. The question class will contain all of the information 
required for the displayQuestion activity to display a question and check an answer. 
This notes file was changed to display next steps at the top of the page, so I have an idea of what I want to complete in the next programming 
session. 
Also, added a text box to displayQuestion to test displaying a question. Then linked submodulesPage to it so that it can be tested. Messed around
with private variables so that I could see when they were destroyed as well. 
10/01/20 - Issue where trying to add an image into android studio would not work if the image contained an upper case letter. This means no 
image files can contain the camel case naming convention. This took about 20 minutes to figure out and fix. Also, a test image was displayed in 
the app to display what will occur when the test questions require a picture.
Attempted to put an image in a folder drawable-anydpi thinking it would be displayed in any situation, but it wouldn't display on my phone,
turns out I have to put it into a drawable-nodpi folder. Although, an image was displayed. 